AWSTemplateFormatVersion: "2010-09-09"
Description: Resume Hosting with Authentication - by Ching Yung (2025)

Parameters:
  PrivateBucketName:
    Type: String
    Default: ching-resume-html
    Description: Unique name for the private S3 bucket hosting resume content
    ConstraintDescription: Must be a globally unique S3 bucket name
  PublicBucketName:
    Type: String
    Default: ching-resume-auth-page
    Description: Unique name for the public S3 bucket hosting the authentication form
    ConstraintDescription: Must be a globally unique S3 bucket name
  AWSRegion:
    Type: String
    Default: eu-west-2
    Description: AWS region for deploying resources
    AllowedValues:
      - eu-west-2
      - us-east-1
      - us-west-2
      - eu-west-1
      - ap-southeast-1
    ConstraintDescription: Must be a valid AWS region
  PreSignedURLExpiration:
    Type: Number
    Default: 3600
    Description: Duration (in seconds) for pre-signed URL validity
    MinValue: 300
    MaxValue: 604800
    ConstraintDescription: Must be between 300 and 604800 seconds
  DomainName:
    Type: String
    Default: chingyung.uk
    Description: Custom domain name for the public authentication page
    ConstraintDescription: Must match the Route 53 hosted zone domain

Resources:
  # Private S3 Bucket for Resume Content
  ResumeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PrivateBucketName
      AccessControl: Private
      Tags:
        - Key: Project
          Value: ResumeWebsite

  # Public S3 Bucket for Authentication Form
  AuthPageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PublicBucketName
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      Tags:
        - Key: Project
          Value: ResumeWebsite

  AuthPageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AuthPageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${AuthPageBucket.Arn}/*"

  # IAM Role for Lambda
  ResumeAuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ching-resume-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${PrivateBucketName}"
                  - !Sub "arn:aws:s3:::${PrivateBucketName}/*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWSRegion}:${AWS::AccountId}:parameter/resume/auth/password"

  # Lambda Function for Authentication
  ResumeAuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ching-resume-auth-lambda
      Runtime: python3.11
      Handler: auth_lambda.handler
      Role: !GetAtt ResumeAuthLambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref PrivateBucketName
          PARAMETER_NAME: /resume/auth/password
          EXPIRATION: !Ref PreSignedURLExpiration
      Code:
        ZipFile: |
          # This is a placeholder - the actual code will be deployed via GitHub Actions
          def handler(event, context):
              return {
                  'statusCode': 503,
                  'body': 'Function not yet deployed'
              }
      Tags:
        - Key: Project
          Value: ResumeWebsite

  # Lambda Function for PDF Serving
  ResumePDFLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ching-resume-pdf-lambda
      Handler: pdf_lambda.handler
      Runtime: python3.11
      Role: !GetAtt ResumePDFLambdaRole.Arn
      Environment:
        Variables:
          RESUME_BUCKET: !Ref PrivateBucketName
          RESUME_KEY: resume.pdf
      Code:
        ZipFile: |
          # This is a placeholder - the actual code will be deployed via GitHub Actions
          def handler(event, context):
              return {
                  'statusCode': 503,
                  'body': 'Function not yet deployed'
              }
      Tags:
        - Key: Project
          Value: ResumeWebsite

  ResumePDFLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ching-resume-pdf-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaPDFExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${PrivateBucketName}"
                  - !Sub "arn:aws:s3:::${PrivateBucketName}/*"

  # API Gateway for Authentication
  ResumeAuthAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ching-resume-auth-api
      Description: API for resume access authentication
      BinaryMediaTypes:
        - application/pdf

  ResumeAuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ResumeAuthAPI
      ParentId: !GetAtt ResumeAuthAPI.RootResourceId
      PathPart: auth

  ResumeAuthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeAuthAPI
      ResourceId: !Ref ResumeAuthResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/${ResumeAuthLambda.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ResumeAuthOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeAuthAPI
      ResourceId: !Ref ResumeAuthResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://chingyung.uk'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ResumeAuthLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWSRegion}:${AWS::AccountId}:${ResumeAuthAPI}/*/POST/auth"

  ResumePDFResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ResumeAuthAPI
      ParentId: !GetAtt ResumeAuthAPI.RootResourceId
      PathPart: resume

  ResumePDFMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeAuthAPI
      ResourceId: !Ref ResumePDFResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/${ResumePDFLambda.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ResumePDFMethodOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeAuthAPI
      ResourceId: !Ref ResumePDFResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'https://chingyung.uk'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ResumePDFPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ResumePDFLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWSRegion}:${AWS::AccountId}:${ResumeAuthAPI}/*/GET/resume

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - ResumeAuthMethod
    - ResumeAuthOptionsMethod
    - ResumePDFMethodGET
    - ResumePDFMethodOPTIONS
    Properties:
      RestApiId: !Ref ResumeAuthAPI
      StageName: prod

  # IAM Role for GitHub Actions
  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ching-resume-github-actions-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:user/github-cf-deploy"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GitHubActionsAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${PrivateBucketName}"
                  - !Sub "arn:aws:s3:::${PrivateBucketName}/*"
                  - !Sub "arn:aws:s3:::${PublicBucketName}"
                  - !Sub "arn:aws:s3:::${PublicBucketName}/*"
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunction
                Resource:
                  - !GetAtt ResumeAuthLambda.Arn
                  - !GetAtt ResumePDFLambda.Arn

  # CloudFront Distribution for Public Bucket
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${PublicBucketName}.s3-website.${AWSRegion}.amazonaws.com"
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /error.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:105051201569:certificate/11fa35ca-5f01-43ad-9558-7f3ae38d603b
          SslSupportMethod: sni-only
        Aliases:
          - !Ref DomainName

  # Route 53 Record for Custom Domain
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: chingyung.uk.
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID

Outputs:
  PrivateBucketName:
    Description: Name of the private S3 bucket
    Value: !Ref PrivateBucketName
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBucketName"
  PublicBucketName:
    Description: Name of the public S3 bucket
    Value: !Ref PublicBucketName
    Export:
      Name: !Sub "${AWS::StackName}-PublicBucketName"
  PublicBucketWebsiteURL:
    Description: Website URL for the public authentication page
    Value: !Sub "http://${PublicBucketName}.s3-website.${AWSRegion}.amazonaws.com"
  APIEndpoint:
    Description: API Gateway endpoint for authentication
    Value: !Sub "https://${ResumeAuthAPI}.execute-api.${AWSRegion}.amazonaws.com/prod/auth"
    Export:
      Name: !Sub "${AWS::StackName}-APIEndpoint"
  CloudFrontURL:
    Description: CloudFront URL for the authentication page
    Value: !Sub "https://${DomainName}"
  AuthLambdaFunctionName:
    Description: Name of the authentication Lambda function
    Value: !Ref ResumeAuthLambda
    Export:
      Name: !Sub "${AWS::StackName}-AuthLambdaFunctionName"
  PDFLambdaFunctionName:
    Description: Name of the PDF serving Lambda function
    Value: !Ref ResumePDFLambda
    Export:
      Name: !Sub "${AWS::StackName}-PDFLambdaFunctionName"